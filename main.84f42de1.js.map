{"version":3,"sources":["scripts/main.js"],"names":["board","startButton","document","querySelector","tableRows","rows","totalScore","messageStart","messageLose","messageWin","score","columns","updateCell","cell","num","innerText","classList","value","add","toString","updateGame","r","c","cells","checkForEmpty","generateNewCell","randomValue","Math","random","row","floor","col","gameLost","check","messageForWinner","remove","messageForLoser","filterZero","filter","el","move","newRow","i","length","isFinite","push","moveLeft","moveRight","reverse","moveUp","moveDown","addEventListener","type","contains","code"],"mappings":"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","file":"main.84f42de1.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.start');\nconst tableRows = document.querySelector('tbody').rows;\nconst totalScore = document.querySelector('.game-score');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\n\nstartButton.addEventListener('click', () => {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  startButton.classList.add('restart');\n  startButton.innerText = 'Restart';\n\n  updateGame();\n  generateNewCell();\n  generateNewCell();\n});\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (num > 0) {\n    cell.innerText = num.toString();\n    cell.classList.add(`field-cell--${num.toString()}`);\n  }\n}\n\nfunction updateGame() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const currentCell = tableRows[r].cells[c];\n      const num = board[r][c];\n\n      updateCell(currentCell, num);\n    }\n  }\n\n  totalScore.innerText = score.toString();\n}\n\nfunction checkForEmpty() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction generateNewCell() {\n  if (!checkForEmpty()) {\n    return;\n  }\n\n  const randomValue = Math.random() > 0.5 ? 2 : 4;\n\n  while (true) {\n    const row = Math.floor(Math.random() * rows);\n    const col = Math.floor(Math.random() * columns);\n\n    if (board[row][col] === 0) {\n      board[row][col] = randomValue;\n      break;\n    }\n\n    updateGame();\n  }\n}\n\ndocument.addEventListener('keyup', type => {\n  switch (startButton.classList.contains('restart')) {\n    case type.code === 'ArrowLeft':\n      moveLeft();\n      generateNewCell();\n      break;\n\n    case type.code === 'ArrowRight':\n      moveRight();\n      generateNewCell();\n      break;\n\n    case type.code === 'ArrowUp':\n      moveUp();\n      generateNewCell();\n      break;\n\n    case type.code === 'ArrowDown':\n      moveDown();\n      generateNewCell();\n      break;\n  }\n\n  if (!gameLost()) {\n    messageForLoser();\n  }\n});\n\nfunction gameLost() {\n  let check = false;\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (r < 3) {\n        if (board[r][c] === board[r + 1][c]\n          || board[r][c] === board[r][c + 1]) {\n          check = true;\n        }\n      }\n    }\n  }\n\n  if (!check && !checkForEmpty()) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction messageForWinner(value) {\n  if (value === 2048) {\n    messageWin.classList.remove('hidden');\n    startButton.classList.remove('restart');\n    startButton.innerText = 'Start';\n  }\n}\n\nfunction messageForLoser() {\n  messageLose.classList.remove('hidden');\n  startButton.classList.remove('restart');\n  startButton.innerText = 'Start';\n}\n\nfunction filterZero(row) {\n  return row.filter(el => el !== 0);\n}\n\nfunction move(row) {\n  let newRow = filterZero(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1] && isFinite(newRow[i])) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n      messageForWinner(newRow[i]);\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction moveLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = move(row);\n    board[r] = row;\n  }\n\n  updateGame();\n}\n\nfunction moveRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = move(row.reverse());\n    board[r] = row.reverse();\n  }\n\n  updateGame();\n}\n\nfunction moveUp() {\n  for (let c = 0; c < columns; c++) {\n    let row = [];\n\n    for (let r = 0; r < rows; r++) {\n      row.push(board[r][c]);\n    }\n\n    row = move(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n    }\n  }\n\n  updateGame();\n}\n\nfunction moveDown() {\n  for (let c = 0; c < columns; c++) {\n    let row = [];\n\n    for (let r = 0; r < rows; r++) {\n      row.push(board[r][c]);\n    }\n\n    row = move(row.reverse());\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n    }\n  }\n\n  updateGame();\n}\n"]}